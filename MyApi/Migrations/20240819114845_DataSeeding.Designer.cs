// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApi.Data;

#nullable disable

namespace MyApi.Migrations
{
    [DbContext(typeof(OrdersDbContext))]
    [Migration("20240819114845_DataSeeding")]
    partial class DataSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyApi.Models.Domain.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = new Guid("01d29b50-94bc-4b58-aca6-a644eff83b33"),
                            CustomerName = "John",
                            PhoneNumber = "111-222-333",
                            email = "xyz@gmail.com"
                        },
                        new
                        {
                            CustomerId = new Guid("b12f061f-2c3c-4b73-bf0d-b902df7f2ba4"),
                            CustomerName = "Michael",
                            PhoneNumber = "111-222-444",
                            email = "abc@gmail.com"
                        },
                        new
                        {
                            CustomerId = new Guid("d4503de4-e1b6-43bc-b5f9-aa4c7a24c814"),
                            CustomerName = "Willams",
                            PhoneNumber = "111-333-444",
                            email = "pqr@gmail.com"
                        },
                        new
                        {
                            CustomerId = new Guid("15988176-70ba-4f21-bba8-250c402b54e7"),
                            CustomerName = "Smith",
                            PhoneNumber = "222-333-444",
                            email = "uvw@gmail.com"
                        });
                });

            modelBuilder.Entity("MyApi.Models.Domain.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MyApi.Models.Domain.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("80f440ee-4cec-4c2f-adfa-0fe91e680e59"),
                            Price = 29m,
                            ProductName = "Wireless Earbuds"
                        },
                        new
                        {
                            ProductId = new Guid("569bec51-0f89-4467-a2b9-3137e01847cb"),
                            Price = 49m,
                            ProductName = "Bluetooth Speaker"
                        },
                        new
                        {
                            ProductId = new Guid("a0978012-8349-43aa-ac8a-79fc5731551d"),
                            Price = 16m,
                            ProductName = "Laptop stand"
                        },
                        new
                        {
                            ProductId = new Guid("a6830687-d41d-486f-8e48-6ff52e757892"),
                            Price = 20m,
                            ProductName = "Gaming Stand"
                        },
                        new
                        {
                            ProductId = new Guid("81d9a2d1-b6e0-4813-8f1b-beff2fada320"),
                            Price = 35m,
                            ProductName = "Smart watch"
                        });
                });

            modelBuilder.Entity("MyApi.Models.Domain.Order", b =>
                {
                    b.HasOne("MyApi.Models.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApi.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
